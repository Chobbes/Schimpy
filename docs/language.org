#+TITLE: Schimpy Documentation
#+AUTHOR: Calvin Beck
#+OPTIONS: ^:{}


* Reserved Words
  Several words are reserved by the language:

  - define
  - macro
  - Byte
  - Int*
  - Uint*
  - And
  - Or
  - Not
  - node
  - network
  - Bool
  - TRUE
  - FALSE
  - Input
  - Output
  - Char
  - enum
* Order of Execution
  The order of execution is important for our models, and
  understanding the control flow of the program. Thus it should be
  simple and easy to follow. We will adopt the convention where,
  given:

  #+BEGIN_SRC lisp
    (Function exp1 exp2 ... expN)
  #+END_SRC

  *exp1* will be executed first, then *exp2*, and so on. Once *expN*
  has been executed the function call itself may be executed. The
  order of execution is "left to right". This execution order only
  matters if there are function calls in the expressions, however. If
  there is no function call they can all be changed in parallel by the
  model checker.
* Syntax
** Data Types
*** Boolean
    TRUE and FALSE values. Single bit of state.

    #+BEGIN_SRC bnf
      boolean_identifier = "TRUE" | "FALSE"
    #+END_SRC

    To declare a boolean variable:

    #+BEGIN_SRC bnf
      boolean_declaration = "(", [whitespace], "Bool", whitespace, variable, whitespace, expression, [whitespace], ")"
    #+END_SRC

    Where the *expression* provides the initial value of the variable.
*** Input
    Single boolean value representing an input from a digital pin on an
    Arduino (TRUE is HIGH, and FALSE is LOW). Input values are updated
    sporadically, but they are guaranteed to not change within a
    function.

    An input variable may be described as below.

    #+BEGIN_SRC bnf
      input_declartion = "(", [whitespace], "Input", whitespace, variable, whitespace, integer, [whitespace], ")"
    #+END_SRC

    The integer value is the port number on the arduino, and this port
    may not be used with an output as well. Only one variable for a
    certain input port may be defined.
*** Output
    Single boolean value for the output on a digital pin (TRUE is HIGH,
    and FALSE is LOW). Output variables act mostly the same as regular
    variables, except that their value will be reflected in the digital
    pins they are supposed to represent on the Arduino.

    An input variable may be described as below.

    #+BEGIN_SRC bnf
      output_declartion = "(", [whitespace], "Output", whitespace, variable, whitespace, integer, whitespace, expression, [whitespace], ")"
    #+END_SRC

    Only one output variable can be declared for a port on the arduino,
    and this port may not be used for an input as well.
*** Integers
    Ranges for integers need to be allowed. In particular we need to be
    able to have integers with only a few bits of state. The less state
    we waste the better.

    I think we can fairly easily support something like the stdint
    types from C, and we can support an arbitrary amount of bits from
    size 1 to size 32. For instance we can have int7_t and uint9_t.

    A variable with a signed integer value may be declared as follows:

    #+BEGIN_SRC bnf
      integer_declaration = "(", [whitespace], "Int", integer_range, whitespace, variable, whitespace, expression, [whitespace], ")"
      integer_range = "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30" | "31" | "32"
    #+END_SRC

    An unsigned integer value must be declared instead as:

    #+BEGIN_SRC bnf
      unsigned_integer_declaration = "(", [whitespace], "Uint", integer_range, whitespace, variable, whitespace, expression, ")"
    #+END_SRC

    The expression must yield the initial integer value.
*** Char
    Single 8-bit bytes. Can use ascii character literals.

    These are somewhat redundant with integers now that we have
    arbitrary bits for the integers. We might scrap these, but the name
    is vaguely useful even if it's just a Uint8_t.

    #+BEGIN_SRC bnf
      char_declaration = "(", [whitespace], "Char", whitespace, variable, whitespace, expression, [whitespace] ")"
    #+END_SRC
*** Symbolic Enums
    It makes sense to support groups of symbols as this will help to
    reduce the state space needed for certain programs. For instance
    with the token passing protocol we could have symbols for READING,
    WAITING, and PASSING which should fit in about two bits of state,
    and is far more readable than having integers of an arbitrary size.

    Symbolic enums should have names in all capital letters to
    differentiate them from other identifiers.

    #+BEGIN_SRC bnf
      symbol = capital_letter, symbol | capital_letter
    #+END_SRC

    A symbol may not override key words either. Each enum has a set of
    symbols, but the symbols are all in global scope so they must be
    unique. This way we can uniquely identify the enum type by the
    symbol's identifier.

    The symbolic enum type must be defined at file scope like
    functions.

    #+BEGIN_SRC bnf
      enum = "(", [whitespace], "enum", whitespace, enum_identifier, whitespace, symbol, {whitespace, symbol}, [whitespace], ")"
      enum_identifier = capital_letter, {lower_case_letter | capital_letter | digit}
    #+END_SRC

    A variable with a symbolic type may be declared with the following format:

    #+BEGIN_SRC bnf
      symbolic_declaration = "(", [whitespace], enum_identifier, whitespace, variable, whitespace, expression, [whitespace], ")"
    #+END_SRC

    The expression must return a symbol value that is within the enum.
** Variable Declaration
   #+BEGIN_SRC bnf
     variable_declaration = boolean_declaration | input_declaration | output_declaration | integer_declaration | unsigned_integer_declaration | char_declaration | symbolic_declaration
     variable_declaration_list = "(", [whitespace], [variable_declaration], {whitespace, variable_declaration}, [whitespace], ")"
   #+END_SRC
** Nodes
   A node in the language should have the form:

   #+BEGIN_SRC bnf
     node_declaration = "(", [whitespace], "node", whitespace, node_identifier, whitespace, let_expression, [whitespace], ")"
     node_declaration_list = "(", [whitespace], [node_declaration], {whitespace, node_declaration}, [whitespace], ")"
     node_identifier = capital_letter, {letter | digit}
   #+END_SRC
** Networks
   #+BEGIN_SRC bnf
     network_definition = "(", [whitespace], "network", whitespace, node_declaration_list, whitespace, connection_list, [whitespace], ")"
     node_pin = "(", node_identifier, variable, ")"
     connection = "(", [whitespace], node_pin, whitespace, node_pin, [whitespace], ")"
     connection_list = "(", [whitespace], [connection], {whitespace, connection}, [whitespace], ")"
   #+END_SRC
** Functions
   Functions are not first class citizens in the languages. Each
   function has an identifier which must be in camel case where the
   first letter in the function name is capitalized.

   #+BEGIN_SRC bnf
     function = capital_letter, {lower_case_letter | capital_letter | digit}
   #+END_SRC

   This allows us to tell when something is a function right away. Note
   that variable type declarations also follow this format, as do macros.

   A function is defined as follows

   #+BEGIN_SRC bnf
     function_definition = "(", [whitespace], "define", whitespace, "(", [whitespace], function, whitespace, variable_list, [whitespace], ")", whitespace, type_list, whitespace, (let_expression | expression), ")"
     type_list = "(", [whitespace], type, {whitespace, type}, [whitespace]")"
     type = capital_letter, {lower_case_letter | capital_letter | digit}
   #+END_SRC

   The final type in the type list is the return value, while the rest are the value of the arguments in order.
*** C Translation
    A function definition of the form

    #+BEGIN_SRC lisp
      (define (FunctionName arg1 arg2 ... argN) (Type1 Type2 ... TypeN ReturnType)
       	expression)
    #+END_SRC

    Would be translated into C as follows:

    #+BEGIN_SRC c
      c_ReturnType FunctionName(c_Type1 arg1, c_Type2 arg2, ... , c_TypeN argN)
      {
          read_outputs();  /* Need to read all of the outputs for a node each time we call a function */
          return c_expression;
      }
    #+END_SRC

    This may get a bit strange with the expressions that don't return
    anything. We can probably use the comma operator in C to solve
    the issues with expressions that don't contribute to the return value.
** Macros
   #+BEGIN_SRC bnf
     macro = capital_letter, {lower_case_letter | capital_letter | digit}
   #+END_SRC

   A macro is defined as follows.

   #+BEGIN_SRC bnf
     macro_definition = "(", [whitespace], "macro", whitespace, "(", [whitespace], macro, whitespace, variable_list, [whitespace], ")", whitespace, whatever, ")"
   #+END_SRC

   There is no type list for macros as they are just inserted into the code.

   Macros are not translated into the other languages. Instead they
   are expanded before the code is translated into any language during
   a preprocessing step. Because of how macros work they can take
   whatever they want for a substitution -- it doesn't have to be
   valid in the language by itself, only when the substitution occurs.
** Expressions
*** Literals
    A single literal be it boolean, or integer forms an expression.
*** Variables
    A variable identifier is an expression as long as it has an
    appropriate type. It can not be a function as we do not support
    first class functions.

    #+BEGIN_SRC bnf
      variable = lower_case_letter, {lower_case_letter | capital_letter | digit}
    #+END_SRC

    Variables must use camel case, starting with a lower case letter
    to distinguish them from functions and symbols.

    In all cases we simply translate to the variable name.
*** Arithmetic Operators
    #+BEGIN_SRC bnf
      arithmetic_expression = addition | multiplication | modulo | division
    #+END_SRC
**** Addition
     #+BEGIN_SRC bnf
       addition = "(", [whitespace], "+", whitespace, expression_list, [whitespace], ")"
     #+END_SRC
***** C Translation
      #+BEGIN_SRC lisp
        (+ exp1 exp2 ... expN)
      #+END_SRC

      Will simply translate to

      #+BEGIN_SRC c
        (c_exp1 + c_exp2 + ... + c_expN)
      #+END_SRC

      Where each *c_expK* is the C translation of *expK*.
**** Subtraction
     #+BEGIN_SRC bnf
       subtraction = "(", [whitespace], "-", whitespace, expression, whitespace, expression, [whitespace], ")"
     #+END_SRC
***** C Translation
      #+BEGIN_SRC lisp
        (- exp1 exp2)
      #+END_SRC

      Should translate to

      #+BEGIN_SRC c
        (c_exp1 - c_exp2)
      #+END_SRC
**** Multiplication
     #+BEGIN_SRC bnf
       multiplication = "(", [whitespace], "*", whitespace, expression_list, [whitespace], ")"
     #+END_SRC
***** C Translation
      #+BEGIN_SRC lisp
        (* exp1 exp2 ... expN)
      #+END_SRC

      Would translate to the following in C

      #+BEGIN_SRC c
        (c_exp1 * c_exp2 * ... * c_expN)
      #+END_SRC

      Where each *c_expK* is the C translation of *expK*.
**** Modulo
     #+BEGIN_SRC bnf
       modulo = "(", [whitespace], "mod", whitespace, expression, whitespace, expression, [whitespace], ")"
     #+END_SRC
***** C Translation
      #+BEGIN_SRC lisp
        (mod exp1 exp2)
      #+END_SRC

      Should translate to

      #+BEGIN_SRC c
        (c_exp1 % c_exp2)
      #+END_SRC
**** Division
     #+BEGIN_SRC bnf
       division = "(", [whitespace], "/", whitespace, expression, whitespace, expression, [whitespace], ")"
     #+END_SRC
***** C Translation
      #+BEGIN_SRC lisp
        (/ exp1 exp2)
      #+END_SRC

      Should translate to

      #+BEGIN_SRC c
        (c_exp1 / c_exp2)
      #+END_SRC
*** Comparison Operators
    #+BEGIN_SRC bnf
      comparison_expression = equality | inequality | less_than | less_than_or_equal | greater_than | greater_than_or_equal
    #+END_SRC
**** Equality
     #+BEGIN_SRC bnf
       equality = "(", [whitespace], "=", whitespace, expression, whitespace, expression, [whitespace], ")"
     #+END_SRC
***** C Translation
      #+BEGIN_SRC lisp
        (= exp1 exp2)
      #+END_SRC

      Should translate to

      #+BEGIN_SRC c
        (c_exp1 == c_exp2)
      #+END_SRC
**** Inequality
     #+BEGIN_SRC bnf
       inequality = "(", [whitespace], "!=", whitespace, expression, whitespace, expression, [whitespace], ")"
     #+END_SRC
***** C Translation
      #+BEGIN_SRC lisp
        (!= exp1 exp2)
      #+END_SRC

      Should translate to

      #+BEGIN_SRC c
        (c_exp1 != c_exp2)
      #+END_SRC
**** Less Than
     #+BEGIN_SRC bnf
       less_than = "(", [whitespace], "<", whitespace, expression, whitespace, expression, [whitespace], ")"
     #+END_SRC
***** C Translation
      #+BEGIN_SRC lisp
        (< exp1 exp2)
      #+END_SRC

      Should translate to

      #+BEGIN_SRC c
        (c_exp1 < c_exp2)
      #+END_SRC
**** Less Than or Equal To
     #+BEGIN_SRC bnf
       less_than_or_equal = "(", [whitespace], "<=", whitespace, expression, whitespace, expression, [whitespace], ")"
     #+END_SRC
***** C Translation
      #+BEGIN_SRC lisp
        (<= exp1 exp2)
      #+END_SRC

      Should translate to

      #+BEGIN_SRC c
        (c_exp1 <= c_exp2)
      #+END_SRC
**** Greater Than
     #+BEGIN_SRC bnf
       greater_than = "(", [whitespace], ">", whitespace, expression, whitespace, expression, [whitespace], ")"
     #+END_SRC
***** C Translation
      #+BEGIN_SRC lisp
        (> exp1 exp2)
      #+END_SRC

      Should translate to

      #+BEGIN_SRC c
        (c_exp1 > c_exp2)
      #+END_SRC
**** Greater Than or Equal To
     #+BEGIN_SRC bnf
       greater_than_or_equal = "(", [whitespace], ">=", whitespace, expression, whitespace, expression, [whitespace], ")"
     #+END_SRC
***** C Translation
      #+BEGIN_SRC lisp
        (>= exp1 exp2)
      #+END_SRC

      Should translate to

      #+BEGIN_SRC c
        (c_exp1 >= c_exp2)
      #+END_SRC
*** Boolean Operators
    #+BEGIN_SRC bnf
      boolean_expression = logical_and | logical_or | logical_not
    #+END_SRC
**** Logical And
     #+BEGIN_SRC bnf
       logical_and = "(", [whitespace], "And", whitespace, expression_list, [whitespace], ")"
     #+END_SRC
***** C Translation
      #+BEGIN_SRC lisp
        (And exp1 exp2 ... expN)
      #+END_SRC

      Should translate to

      #+BEGIN_SRC c
        (c_exp1 && c_exp2 && ... && c_expN)
      #+END_SRC
**** Logical Or
     #+BEGIN_SRC bnf
       logical_or = "(", [whitespace], "Or", whitespace, expression_list, [whitespace], ")"
     #+END_SRC
***** C Translation
      #+BEGIN_SRC lisp
        (Or exp1 exp2 ... expN)
      #+END_SRC

      Should translate to

      #+BEGIN_SRC c
        (c_exp1 || c_exp2 || ... || c_expN)
      #+END_SRC
**** Logical Negation
     #+BEGIN_SRC bnf
       logical_not = "(", [whitespace], "Not", whitespace, expression, [whitespace], ")"
     #+END_SRC
***** C Translation
      #+BEGIN_SRC lisp
        (Not exp)
      #+END_SRC

      Should translate to

      #+BEGIN_SRC c
        (!c_exp)
      #+END_SRC
*** If Then Else
     #+BEGIN_SRC bnf
       if_expression = "(", [whitespace], "if", whitespace, expression, whitespace, expression, whitespace, expression, [whitespace], ")"
     #+END_SRC
***** C Translation
      #+BEGIN_SRC lisp
        (if cond exp2 exp3)
      #+END_SRC

      Should translate to

      #+BEGIN_SRC c
        (c_cond ? c_exp1 : c_exp2)
      #+END_SRC
*** Begin
    Begin is a way of sequencing multiple actions, returning the last
    result.

    #+BEGIN_SRC bnf
      begin = "(", [whitespace], "Begin", whitespace, expression_list, [whitespace], ")"
    #+END_SRC

    The value of the final expression in the expression list is
    returned. All other expressions are executed, and their values are
    discarded. This is mostly useful for performing IO.

    Note that the expressions still follow the regular execution
    order, and are evaluated from left to right.

    Unfortunately I do not think there is a good way to have a
    "begin0" which returns the result of the first one in C.
**** C Translation
     A begin expression like:

     #+BEGIN_SRC lisp
       (Begin exp1 exp2 ... expN)
     #+END_SRC

     will be translated in C using the comma operator, like so:

     #+BEGIN_SRC c
       (c_exp1, c_exp2, ... , c_expN)
     #+END_SRC
*** Set
    Set is essentially a predefined function which sets the value of a
    given variable. With outputs this has the effect of writing to the
    digital output on an Arduino.

    #+BEGIN_SRC bnf
      set = "(", [whitespace], "Set", whitespace, variable, whitespace, expression, [whitespace], ")"
    #+END_SRC

    Note that the variable must be some kind of state variable, and
    the expression must have the same type as the variable.
** Let Expressions
   Let bindings are allowed in a restricted set of places (essentially
   at the top of a function). These allow one to define extra
   variables. Some of these variables may need state, for instance all
   of them in a node that are set, and all of them which are
   initialized with a function's return value.

   #+BEGIN_SRC bnf
     let_expression = "(", [whitespace], "let", whitespace, variable_declaration_list, whitespace, expression, [whitespace], ")"
   #+END_SRC
* Expressions
** Simple expressions
   #+BEGIN_SRC bnf
     simple_expression = literal | variable | arithmetic_expression | comparison_expression | boolean_expression
   #+END_SRC
* Nodes
  These represent the main program which is a single thread of
  execution on a single processor. Each node contains a single state
  transition function, as well as some variables which represent the
  current state of the function. Each variable may only be altered
  once in the state transition function, and it may only be used in
  expressions before being modified -- this allows for the model
  checker code to be much simpler.
* Networks
  We need to be able to create networks in the language so we can
  automatically make models for entire networks, as well as make
  topology files for the Arduino emulator (and hopefully have
  everything immediately testable with Emulard).

  The basic idea is to assign names to the different nodes, and then
  specify the connections between them. We will use the names of the
  input / output variables to specify the connections.

  #+BEGIN_SRC lisp
    ;; Example for how to declare a network.
    (network
     ;; List of name, node pairs.
     ((read reader)
      (write writer))
    
     ;; List of connections output -> input
     (((read ack) (write ack))
      ((write bit) (read bit))
      ((write lock) (read lock))))
  #+END_SRC

  When translating to NuSMV the network is turned into the main
  module, while the individual nodes are made into their own modules
  which are instantiated within the main module.
* Macros
  Macros are essentially function calls, but when the model checking
  code is generated they are expanded into single expressions. As a
  result they can not be recursive, although they can call other
  macros.

  The advantage of using macros instead of functions is that they
  don't introduce any extra state. When you use functions, which can
  be recursive, we have to keep track of which function we are
  currently executing. Each function call will take an additional step
  in the model checker as well (which will affect specifications),
  whereas a macro will not. Macros will also guarantee referential
  transparency -- if they are called with the same arguments they will
  result in the same values.

  Note that the code that results from expanding a macro will result
  in the same restrictions that all other code will have, but
  otherwise they may be called in any place in the code. Functions are
  somewhat more restricted and may only be called in the tail, this
  prevents the model checking code from having to account for return
  positions.
** Scope
   Macros have the same scoping that functions do.
** Return Values
   Macros may return a list of values, but may only have one possible
   return type.
* Functions
  Functions are not expanded, and they might not be pure as the
  outputs and inputs are essentially pass by reference.
** Return Values
   Return values are completely necessary for functions because
   otherwise you can not return anything you read! This is complicated
   by the model needing to keep track of which variable to store the
   return value in.

   In NuSMV it is possible to implement function calls as modules, and
   use a "return value" variable in the module, as well as some
   boolean variable to represent when a function is done. By doing
   this we can just copy the module's return value into any variable
   that receives the functions value once the module is marked as
   being "done".
** Function Calling
*** Non-Recursive Functions
    In most cases you should try to use macros when you don't need to
    use recursion with functions. Macros can give you much of the same
    benefits, but they have the advantage of not requiring any
    additional state. While these may not be nearly as useful as their
    recursive counterparts our discussion of functions starts here for
    simplicity.

    The main difference between a non-recursive function and a macro
    is that the function can actually perform some I/O. A function
    call will cause input values to be read, and allow for all outputs
    to be written to.

    Since these functions are basically beefier macros we can call
    them from almost anywhere within another function. The one
    restriction is that all I/O must be done before any other function
    calls. The reason for this is that a function call can cause
    modifications to the I/O variables, so when the function returns
    they will not be in the same state as before. In fact any function
    that is not itself recursive may call any function in this manner
    whether or not the other function is recursive.

**** Multiple Calls
    A problem occurs when the same function is called multiple times
    in a function. For instance if we have an expression

    #+BEGIN_SRC lisp
      (eq (fact 0) (fact 1))
    #+END_SRC

    Then we will need additional storage to hold one of the results
    from the factorial computation while the second factorial
    computation is being performed. We need to know when exactly an
    additional temporary variable is necessary.

    It is clear that it is not always a necessity when a function is
    called multiple times, for instance in the expression:

    #+BEGIN_SRC lisp
      (if (eq 6 (fact 3)) (fact 0) (fact 1))
    #+END_SRC

    No additional state is necessary. The additional state is only
    necessary when we have to immediately perform operations on
    multiple results from the same function call, when the results for
    the function call are not stored in any additional variables
    beforehand.

    So, this means that when we have multiple branches of computation
    that each call a function once we don't need any additional
    state. Furthermore if we have, for instance, something like:

    #+BEGIN_SRC lisp
      (if true (eq (fact 0) (fact 1)) (eq (fact 1) (fact 2)))
    #+END_SRC

    Then while each branch needs a temporary variable to store a
    result from fact only one temporary variable is necessary since
    the computations may not occur at the same time.

    We need to, therefore, figure out how many times a function is
    called in each simple expression. The number of temporary
    variables needed for a function call is thus given by the largest
    number of times a function call can occur in a simple expression
    minus one (since one of the results can just be from the functions
    return value).

    There is actually another bad case, though. Suppose we have
    something like...
    
    #+BEGIN_SRC lisp
      (define (g x)
        (f (* 2 x)))
       
      (eq (f 1) (g 2))
    #+END_SRC

    Then while this would be fine were we to evaluate *g* first, and
    then *f* a problem occurs when we call *f* first and then *g*. If
    we call *f* before *g* we store the result of *f* only in the
    return variable for the *f* module, but then when we calculate
    *g* this return is overwritten.

    Thus we actually have to check all possible functions that can be
    called from our functions, and then add temporary variables
    accordingly. It's also possible to optimize the order.

**** TODO Outputs
     There is a problem with using outputs with functions -- it is not
     clear when to modify the output. This doesn't affect inputs
     because we are just grabbing the value for the inputs, not
     writing to them.

     The easiest solution is probably to keep track of output in
     separate variables and assign them like return values... However,
     this will be delayed. Thus this solution is not viable --
     protocols that rely on switching outputs and waiting for certain
     inputs can not be written within functions in this case.

     A better solution is to add next values in the NuSMV translation
     as though output was just another argument / variable in the
     function's NuSMV module. The translation here isn't really any
     different, however this can not go inside of the module (it must
     go inside the node's module which defines the output in the first
     place), and then it must be appropriately guarded within a case
     statement (output may be modified in many different
     functions). Things we have to check for in the guard:

     - The function is being called where output is an argument
     - The function is currently computing.
     - Argument check

     These are actually the same conditions as any variable within the
     function -- the only difference is that the outputs the function
     is called with can be different (the function can be given
     different arguments)... So, we need to perform the argument check
     for output as well.

*** Recursive Functions
    Any function which calls itself must do so in a tail recursive
    fashion. A function may not indirectly recurse (e.g., *f* calls
    *g* which in turn calls *f*, because the previous state of *f*
    will still be needed).

    Otherwise the exact same restrictions for non-recursive functions
    holds.
* Examples
  Currently working on some examples for the language to figure out
  any oddities with the language, as well as how things should be
  translated.
** Communication
   Working on some communication examples. Want to show that it can be
   easy to write a little bit communication protocol that can share
   bytes and be reused easily. This was a problem with the previous
   iteration of the language.
*** Protocol
    The protocol in question involves a reader and a writer connected
    over a three bit channel. The connection is one way. The three
    channels are called *bit* (this is the data bit), *lock*, and
    *ack*. *bit* and *lock* communicate a single digital value from the
    writer to the reader. *ack* is used to send acknowledgments from
    the reader to the writer. The general idea is as follows:

    - The writer sets *bit*, and then sets *lock* to say "hey, there
      is a bit to read!"
    - The reader then looks at the value of *bit* and stores it. The
      reader then says "okay, got it!" by setting *ack*.
    - The reader then waits for the writer to unset *lock*. This is
      how the writer acknowledges that the reader has in fact gotten
      the value for bit.
    - The writer then waits for the reader to unset *ack*, which means
      that the reader is now in the position to accept more bits.

    This may then be repeated in order to read multiple bits in.
*** Reader
    Implemented in [[./examples/communication/reader.el][reader.el]], and an example NuSMV translation is given in [[./examples/communication/reader.smv][reader.smv]]

    One problem that came up is that I initially had this:

    #+BEGIN_SRC lisp
      ;; All this does is constantly read bytes
      (node reader
            ;; Port numbers below...
            (let ((byte (read_byte 2 3 4 8)))))
    #+END_SRC

    But in this case the initial value of "byte" isn't really well
    defined. There should probably be a rule that the value in a let
    binding must simplify down to a single expression. That is, it can
    be a macro call, a constant value, or maybe even defined as being
    another variable within the scope, but it may not be the value of
    a function call.

    It is also clear that nodes will need to have some state variables
    which can be modified. I think this is reasonable -- they are
    essentially the main variables describing the state of the FSM.

    This was changed to:

    #+BEGIN_SRC lisp
      ;; All this does is constantly read bytes
      (node reader
            ;; State variables are declared first with an initial
            ;; value. These may change after each iteration.
            ((byte our_byte) 0)
      
            ;; Port numbers below...
            (set our_byte (read_byte 2 3 4 8)))
    #+END_SRC

    So, now we declare state variables with an initial value, and can
    change them with "set".

    With how this is set up it may be difficult to know which pins are
    outputs... We should probably have to declare I/O pins,
    actually. Who knows if a pin is being used for input or output
    otherwise! So perhaps we should write nodes more like:

    #+BEGIN_SRC lisp
      ;; All this does is constantly read bytes
      (node reader
            ;; State variables are declared first with an initial
            ;; value. These may change after each iteration.
            (((byte our_byte) 0)
             ((input bit 2))  ; Initial values don't make sense for inputs.
             ((input lock 3))
             ((output ack 4) false))
      
            ;; Port numbers below...
            (set our_byte (read_byte bit lock ack 8)))
    #+END_SRC

    Where any I/O that the node uses must be declared within the
    node. Note that when we are reading in bytes we must use tail
    recursion!
*** Writer
    Implemented in [[./examples/communication/writer.el][writer.el]], and an example NuSMV translation is given in [[./examples/communication/writer.smv][writer.smv]]

    Writer is very similar to reader. One problem that came up was
    functions that just do I/O and don't have anything of value to
    return. For now the return values are just "()", which is the
    empty list.
** Factorial
   Factorial is a simple program to demonstrate tail call
   recursion. With tail call recursion "stack frames" can be reused,
   so no extra state is necessary.
* Some Assumptions
  - We will assume that numbers are completely random, which is not
    necessarily the case and may cause infinite arbitration in certain
    protocols (e.g., the token passing protocol).
  - Anything that occurs within a single state is atomic. For example
    in a single function call multiple outputs may be changed at
    once. In reality there will be a small delay between the changes
    in the outputs. This probably won't have any affect on anything,
    but it could potentially be an issue in the simple bit
    communication protocol if we set the data bit, and the lock bit in
    the same function.
  - There is an assumption that the single bit channels will always be
    read correctly.
